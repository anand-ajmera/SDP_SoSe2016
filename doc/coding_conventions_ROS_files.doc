* Convention for Launch file : 

-> Example launch file for reference :

<launch>

  <!-- For launching a simple node-->
  <node name="talker" pkg="rospy_tutorials" type="talker" />

  <!-- For launching of nodelets-->
  <node ns="wg1" name="listener-wg1" pkg="rospy_tutorials" type="listener" respawn="true" />
  <!-- start a group of nodes in the 'wg2' namespace -->
  <group ns="wg2">
    <!-- remap applies to all future statements in this scope. -->
    <remap from="chatter" to="hello"/>
    <node pkg="rospy_tutorials" type="listener" name="listener" args="--test" respawn="true" />
    <node pkg="rospy_tutorials" type="talker" name="talker">
      <!-- set a private parameter for the node -->
      <param name="talker_1_param" value="a value" />
      <!-- nodes can have their own remap args -->
      <remap from="chatter" to="hello-1"/>
      <!-- you can set environment variables for a node -->
      <env name="ENV_EXAMPLE" value="some value" />
    </node>
  </group>

  <!-- Setting parameter values-->
  <param name="someinteger1" value="1" type="int" />

</launch>


* Convention for CMake file : 

# Reference : http://wiki.ros.org/catkin/CMakeLists.txt

Your CMakeLists.txt file MUST follow this format otherwise your packages will not build correctly :

1. Required CMake Version (cmake_minimum_required)

        cmake_minimum_required(VERSION 2.8.3)

2. Package Name (project())

        project(robot_brain)


3. Find other CMake/Catkin packages needed for build (find_package())

        find_package(catkin REQUIRED)

4. Message/Service/Action Generators (add_message_files(), add_service_files(), add_action_files())        

        add_message_files(...)
        add_service_files(...)
        add_action_files(...)
 
5. Invoke message/service/action generation (generate_messages())
        
        generate_messages(...)

6. Specify package build info export (catkin_package())

        catkin_package(
           INCLUDE_DIRS include
           LIBRARIES ${PROJECT_NAME}
           CATKIN_DEPENDS roscpp nodelet
           DEPENDS eigen opencv)

7. Libraries/Executables to build (add_library()/add_executable()/target_link_libraries())

        include_directories(include ${Boost_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

8. Tests to build (catkin_add_gtest())

        catkin_add_gtest(myUnitTest test/utest.cpp)

9. Install rules (install()) (OPTIONAL)

        install(TARGETS python_module_library
          ARCHIVE DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
          LIBRARY DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
         )


-> Example CMake file for reference : 

  # Get the information about this package's buildtime dependencies
  find_package(catkin REQUIRED
    COMPONENTS message_generation std_msgs sensor_msgs)

  # Declare the message files to be built
  add_message_files(FILES
    MyMessage1.msg
    MyMessage2.msg
  )

  # Declare the service files to be built
  add_service_files(FILES
    MyService.srv
  )

  # Actually generate the language-specific message and service files
  generate_messages(DEPENDENCIES std_msgs sensor_msgs)

  # Declare that this catkin package's runtime dependencies
  catkin_package(
   CATKIN_DEPENDS message_runtime std_msgs sensor_msgs
  )


* Convention for package.xml file : 

Reference : http://wiki.ros.org/catkin/package.xml

-> There are a minimal set of tags that need to be nested within the <package> tag to make the package manifest complete.

1. <name> - The name of the package

2. <version> - The version number of the package (required to be 3 dot-separated integers)

3. <description> - A description of the package contents

4. <maintainer> - The name of the person(s) that is/are maintaining the package

5. <license> - The software license(s) (e.g. GPL, BSD, ASL) under which the code is released.


-> The package manifest with minimal tags does not specify any dependencies on other packages. Packages can have six types of dependencies: 

<depend> specifies that a dependency is a build, export, and execution dependency. This is the most commonly used dependency tag.

<buildtool_depend>

<build_depend>

<build_export_depend>

<exec_depend>

<test_depend>

<doc_depend>

-> Example package.xml file for reference : 

<package>
  <name>foo_core</name>
  <version>1.2.4</version>
  <description>
    This package provides foo capability.
  </description>
  <maintainer email="ivana@willowgarage.com">Ivana Bildbotz</maintainer>
  <license>BSD</license>

  <url>http://ros.org/wiki/foo_core</url>
  <author>Ivana Bildbotz</author>

  <buildtool_depend>catkin</buildtool_depend>

  <build_depend>message_generation</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>

  <run_depend>message_runtime</run_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>rospy</run_depend>
  <run_depend>std_msgs</run_depend>

  <test_depend>python-mock</test_depend>
</package>


